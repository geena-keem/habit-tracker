{"version":3,"sources":["components/habit.jsx","components/habitAddForm.jsx","components/habits.jsx","components/navbar.jsx","app.jsx","components/simpleHabit.js","index.js"],"names":["Habit","handleIncrement","props","onIncrement","habit","handleDecrement","onDecrement","handleDelete","onDelete","console","log","this","name","count","className","onClick","PureComponent","HabitAddForm","memo","formRef","React","createRef","inputRef","ref","onSubmit","event","preventDefault","current","value","onAdd","reset","type","placeholder","Habits","habits","map","id","onReset","Component","Navbar","totalCount","SimpleHabit","useState","setCount","spanRef","useRef","useCallback","useEffect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PA6DeA,E,4MAhDbC,gBAAkB,WAChB,EAAKC,MAAMC,YAAY,EAAKD,MAAME,Q,EAGpCC,gBAAkB,WAChB,EAAKH,MAAMI,YAAY,EAAKJ,MAAME,Q,EAGpCG,aAAe,WACb,EAAKL,MAAMM,SAAS,EAAKN,MAAME,Q,uDAnBjC,WAEEK,QAAQC,IAAR,iBAAsBC,KAAKT,MAAME,MAAMQ,KAAvC,e,kCAGF,WAEEH,QAAQC,IAAR,iBAAsBC,KAAKT,MAAME,MAAMQ,KAAvC,oB,oBAeF,WACEH,QAAQC,IAAI,SADL,MAOiBC,KAAKT,MAAME,MAA3BQ,EAPD,EAOCA,KAAMC,EAPP,EAOOA,MAEd,OACE,qBAAIC,UAAU,QAAd,UACE,sBAAMA,UAAU,aAAhB,SAA8BF,IAC9B,sBAAME,UAAU,cAAhB,SAA+BD,IAC/B,wBACEC,UAAU,8BACVC,QAASJ,KAAKV,gBAFhB,SAIE,mBAAGa,UAAU,yBAEf,wBACEA,UAAU,8BACVC,QAASJ,KAAKN,gBAFhB,SAIE,mBAAGS,UAAU,0BAEf,wBACEA,UAAU,4BACVC,QAASJ,KAAKJ,aAFhB,SAIE,mBAAGO,UAAU,0B,GApDHE,iBCmCLC,EAlCMC,gBAAK,SAAChB,GAGzB,IAAMiB,EAAUC,IAAMC,YAChBC,EAAWF,IAAMC,YAiBvB,OACE,uBAAME,IAAKJ,EAASL,UAAU,WAAWU,SAhB1B,SAACC,GAChBA,EAAMC,iBAON,IAAMd,EAAOU,EAASK,QAAQC,MAC9BhB,GAAQV,EAAM2B,MAAMjB,GAIpBO,EAAQQ,QAAQG,SAGhB,UACE,uBACEP,IAAKD,EACLR,UAAU,YACViB,KAAK,OACLC,YAAY,UAEd,wBAAQlB,UAAU,aAAlB,uBCHSmB,E,4JAxBb,WAAU,IAAD,OAEP,OADAxB,QAAQC,IAAI,UAEV,qCACE,cAAC,EAAD,CAAcmB,MAAOlB,KAAKT,MAAM2B,QAChC,6BACGlB,KAAKT,MAAMgC,OAAOC,KAAI,SAAC/B,GAAD,OACrB,cAAC,EAAD,CAEEA,MAAOA,EACPD,YAAa,EAAKD,MAAMC,YACxBG,YAAa,EAAKJ,MAAMI,YACxBE,SAAU,EAAKN,MAAMM,UAJhBJ,EAAMgC,SAQjB,wBAAQtB,UAAU,eAAeC,QAASJ,KAAKT,MAAMmC,QAArD,8B,GAjBaC,aCWNC,E,4JAZb,WAEE,OADA9B,QAAQC,IAAI,UAEV,sBAAKI,UAAU,SAAf,UACE,mBAAGA,UAAU,4BACb,iDACA,sBAAMA,UAAU,eAAhB,SAAgCH,KAAKT,MAAMsC,oB,GAP9BxB,iB,GCGHsB,Y,aCyBHG,EA5BK,WAAO,IAAD,EACEC,mBAAS,GADX,mBACjB7B,EADiB,KACV8B,EADU,KAElBC,EAAUC,mBAGV5C,EAAkB6C,uBAAY,WAClCH,EAAS9B,EAAQ,MASnB,OANAkC,qBAAU,WACRtC,QAAQC,IAAR,6BAAkCG,MACjC,CAACA,IAKF,qBAAIC,UAAU,QAAd,UACE,sBAAMS,IAAKqB,EAAS9B,UAAU,aAA9B,qBAGA,sBAAMA,UAAU,cAAhB,SAA+BD,IAC/B,wBAAQC,UAAU,8BAA8BC,QAASd,EAAzD,SACE,mBAAGa,UAAU,6BCjBrBkC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e5c450c6.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\n\r\nclass Habit extends PureComponent {\r\n  componentDidMount() {\r\n    // 컴포넌트가  UI상에 등록이 되었을 때, 사용자에게 보여질 때 호출이 된다.\r\n    console.log(`habit: ${this.props.habit.name} mounted`);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // 컴포넌트가 UI상에서 없어질 때 즉, 지우기 전에 호출이 된다.\r\n    console.log(`habit: ${this.props.habit.name} will unmount`);\r\n  }\r\n\r\n  handleIncrement = () => {\r\n    this.props.onIncrement(this.props.habit);\r\n  };\r\n\r\n  handleDecrement = () => {\r\n    this.props.onDecrement(this.props.habit);\r\n  };\r\n\r\n  handleDelete = () => {\r\n    this.props.onDelete(this.props.habit);\r\n  };\r\n\r\n  render() {\r\n    console.log('habit');\r\n    // console.log(this.props.habit);\r\n\r\n    // const habitName = this.props.habit.name;\r\n    // const habitCount = this.props.habit.count;\r\n\r\n    const { name, count } = this.props.habit;\r\n\r\n    return (\r\n      <li className=\"habit\">\r\n        <span className=\"habit-name\">{name}</span>\r\n        <span className=\"habit-count\">{count}</span>\r\n        <button\r\n          className=\"habit-button habit-increase\"\r\n          onClick={this.handleIncrement}\r\n        >\r\n          <i className=\"fas fa-plus-square\"></i>\r\n        </button>\r\n        <button\r\n          className=\"habit-button habit-decrease\"\r\n          onClick={this.handleDecrement}\r\n        >\r\n          <i className=\"fas fa-minus-square\"></i>\r\n        </button>\r\n        <button\r\n          className=\"habit-button habit-delete\"\r\n          onClick={this.handleDelete}\r\n        >\r\n          <i className=\"fas fa-trash\"></i>\r\n        </button>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Habit;\r\n","import React, { memo } from 'react';\r\n\r\n// memo: PureComponent와 비슷하다\r\nconst HabitAddForm = memo((props) => {\r\n  // PureComponent는 props와 state안에 들어 있는 데이터가 최상위에 있는 데이터가 변하지 않으면\r\n  //                 render함수가 호출되지 않는다. 즉, re-rendering을 하지 않는다!\r\n  const formRef = React.createRef();\r\n  const inputRef = React.createRef();\r\n\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    // console.log('submit');\r\n    // 페이지가 리로딩되는 이유는 기본적으로 submit이 발생하면\r\n    // 페이지가 리프레시가 되거나 다른 페이지로 가는걸 예상하기 때문이다.\r\n    // console.log(this.inputRef.current.value);\r\n\r\n    const name = inputRef.current.value;\r\n    name && props.onAdd(name);\r\n\r\n    // input입력 후 초기화\r\n    // this.inputRef.current.value = '';\r\n    formRef.current.reset();\r\n  };\r\n  return (\r\n    <form ref={formRef} className=\"add-form\" onSubmit={onSubmit}>\r\n      <input\r\n        ref={inputRef}\r\n        className=\"add-input\"\r\n        type=\"text\"\r\n        placeholder=\"Habit\"\r\n      />\r\n      <button className=\"add-button\">ADD</button>\r\n    </form>\r\n  );\r\n});\r\n\r\nexport default HabitAddForm;\r\n","import React, { Component } from 'react';\r\nimport Habit from './habit';\r\nimport HabitAddForm from './habitAddForm';\r\n\r\nclass Habits extends Component {\r\n  render() {\r\n    console.log('habits');\r\n    return (\r\n      <>\r\n        <HabitAddForm onAdd={this.props.onAdd} />\r\n        <ul>\r\n          {this.props.habits.map((habit) => (\r\n            <Habit\r\n              key={habit.id}\r\n              habit={habit}\r\n              onIncrement={this.props.onIncrement}\r\n              onDecrement={this.props.onDecrement}\r\n              onDelete={this.props.onDelete}\r\n            />\r\n          ))}\r\n        </ul>\r\n        <button className=\"habits-reset\" onClick={this.props.onReset}>\r\n          RESET ALL\r\n        </button>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Habits;\r\n","import React, { PureComponent } from 'react';\r\n\r\nclass Navbar extends PureComponent {\r\n  render() {\r\n    console.log('navbar');\r\n    return (\r\n      <nav className=\"navbar\">\r\n        <i className=\"navbar-logo fas fa-leaf\"></i>\r\n        <span>Habit Tracker</span>\r\n        <span className=\"navbar-count\">{this.props.totalCount}</span>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from 'react';\nimport './app.css';\nimport Habits from './components/habits';\nimport Navbar from './components/navbar';\n\nclass App extends Component {\n  state = {\n    habits: [\n      { id: 1, name: 'Reading', count: 0 },\n      { id: 2, name: 'Running', count: 0 },\n      { id: 3, name: 'Coding', count: 0 },\n    ],\n  };\n\n  handleIncrement = (habit) => {\n    // console.log(`hadleIncrement ${habit.name}`);\n    const habits = this.state.habits.map((item) => {\n      if (item.id === habit.id) {\n        return { ...habit, count: habit.count + 1 };\n      }\n      return item;\n    });\n\n    // this.setState({ habits: habits });\n    this.setState({ habits });\n  };\n\n  handleDecrement = (habit) => {\n    // console.log(`hadleDecrement ${habit.name}`);\n    const habits = this.state.habits.map((item) => {\n      if (item.id === habit.id) {\n        const count = habit.count - 1;\n        return { ...habit, count: count < 0 ? 0 : count };\n      }\n      return item;\n    });\n\n    // if (habits[index].count <= 0) {\n    //   return;\n    // } else {\n    //   habits[index].count--;\n    // }\n\n    this.setState({ habits });\n  };\n\n  handleDelete = (habit) => {\n    // console.log(`handleDelete ${habit.name}`);\n\n    const habits = this.state.habits.filter((item) => item.id !== habit.id);\n    // filter를 사용해서 this.state에 있는 habits을 빙글빙글 돌면서 item을 전달 받은 후\n    // item.id와 삭제하고자 하는 habit.id가 동일하지 않은 것들만 골라내서 새로운 배열로 반환한다.\n\n    this.setState({ habits });\n  };\n\n  HandleAdd = (name) => {\n    const habits = [\n      ...this.state.habits,\n      { id: Date.now(), name: name, count: 0 },\n    ];\n\n    this.setState({ habits });\n  };\n\n  handleReset = () => {\n    const habits = this.state.habits.map((habit) => {\n      if (habit.count !== 0) {\n        return { ...habit, count: 0 };\n      }\n      return habit;\n    });\n\n    this.setState({ habits });\n  };\n\n  render() {\n    console.log('app');\n    return (\n      <>\n        {/* totalCount: this.state에 있는 habits배열 중에 \n        item.count가 0이상인 것들만 배열을 새로 만든 후 그 길이를 전달해준다. */}\n        <Navbar\n          totalCount={this.state.habits.filter((item) => item.count > 0).length}\n        />\n        <Habits\n          habits={this.state.habits}\n          onIncrement={this.handleIncrement}\n          onDecrement={this.handleDecrement}\n          onDelete={this.handleDelete}\n          onAdd={this.HandleAdd}\n          onReset={this.handleReset}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\r\n\r\nconst SimpleHabit = () => {\r\n  const [count, setCount] = useState(0);\r\n  const spanRef = useRef();\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const handleIncrement = useCallback(() => {\r\n    setCount(count + 1);\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log(`mounted & updated: ${count}`);\r\n  }, [count]);\r\n  // count가 변경될 때마다 함수가 호출된다.\r\n  // [] 빈 배열을 전달하면 처음에만 호출된다.\r\n\r\n  return (\r\n    <li className=\"habit\">\r\n      <span ref={spanRef} className=\"habit-name\">\r\n        Reading\r\n      </span>\r\n      <span className=\"habit-count\">{count}</span>\r\n      <button className=\"habit-button habit-increase\" onClick={handleIncrement}>\r\n        <i className=\"fas fa-plus-square\"></i>\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default SimpleHabit;\r\n\r\n// 클래스형 컴포넌트에서 멤버변수는 클래스가 만들어질 때 한번만 만들어지고 render 함수만 반복적으로 호출된다.\r\n\r\n// 함수형 컴포넌트는 컴포넌트가 변경이 되면 코드블럭 전체가 계속 반복적으로 호출된다.\r\n//  => props나 state가 변경이 되면 반복적으로 호출!\r\n\r\n// onClick에 전달한 콜백함수는 처음 불려질 때 새로운 함수(오브젝트)가 만들어지고\r\n// 다음 state가 변경이 되어서 콜백함수가 호출되면 새로운 오브젝트가 만들어진다.\r\n\r\n// useState: 리액트 훅에서 제공하는 API 중에 하나로 useState를 사용하면 리액트가 알아서 자동으로 기억하고 있다.\r\n//           => useState를 아무리 많이 호출해도 컴포넌트에 연결된 state는 따로 저장이 되어 있어 계속 동일한 값을 받아올 수 있다.\r\n\r\n// useRef: createRef처럼 매번 호출할 때마다 새로운 레퍼런스를 만들지 않고\r\n//         한번만 만들고 메모리에 저장 후 재사용한다.\r\n\r\n// useCallback: useCallback을 사용하게 되면 콜백함수가 계속 반복해서 호출이 되어도 동일한 콜백함수를 전달한다.\r\n//               => 계속 업데이트되는 사이드 이펙트를 방지할 수 있다!\r\n\r\n// useEffect: componentDidMount와 componentDidUpdate를 결합한 것이다.\r\n//            컴포넌트가 마운트 되었을 때 업데이트가 될 때마다 호출된다.\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport '@fortawesome/fontawesome-free/js/all.js';\nimport SimpleHabit from './components/simpleHabit';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SimpleHabit />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}